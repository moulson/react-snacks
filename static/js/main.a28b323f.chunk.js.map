{"version":3,"sources":["logo.png","components/Header/Header.js","containers/Home.js","containers/Subscribe.js","containers/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["HeaderWrapper","styled","div","LogoWrapper","Logo","img","HeaderLinksWrapper","ul","Link","a","Header","links","href","src","logo","map","link","title","Home","React","Component","Subscribe","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a28b323f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.4d803a75.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from '../../logo.png';\r\n\r\nconst HeaderWrapper = styled.div`\r\n  background-color: #FF4136;\r\n  color: #fff;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: inline-flex;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n    display: inline-flex;\r\n    width: 64px;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n    width: 64px;\r\n    height: auto;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst HeaderLinksWrapper = styled.ul`\r\n    list-style: none;\r\n    display: inline-flex;\r\n    justify-content: space-evenly;\r\n    width: 100%;\r\n`\r\n\r\nconst Link = styled.a`\r\n    color: #fff;\r\n    font-size: 1.5rem;\r\n    text-decoration: none;\r\n    margin: 0px 20px;\r\n`;\r\n\r\nconst Header = ({ links }) => (\r\n    <HeaderWrapper>\r\n        <LogoWrapper>\r\n            <Link href='/'>\r\n                <Logo src={logo}/>\r\n            </Link>\r\n        </LogoWrapper>\r\n        <HeaderLinksWrapper>\r\n            {links.map(link =>\r\n                <Link href={link.href}>{link.title}</Link>\r\n            )}\r\n        </HeaderLinksWrapper>\r\n    </HeaderWrapper>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nclass Home extends React.Component{\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return <h1>Home</h1>;\r\n\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nclass Subscribe extends React.Component{\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return <div>This is the subscribe page!</div>;\r\n    }\r\n}\r\n\r\nexport default Subscribe;","import React from 'react';\nimport styled from 'styled-components';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Header from '../components/Header/Header'\nimport Home from './Home';\nimport Subscribe from './Subscribe';\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n  }\n\n  render(){\n    const links = [\n      {href: '/subscribe', title: 'Subscribe'},\n      {href: '#', title: 'About Us'},\n      {href: '#', title: 'What\\'s in a box'},\n    ];\n     return (\n    <>\n      <Header links={links}></Header>\n      <Router>\n        <Route exact path='/' component={Home}/>\n        <Route exact path='/subscribe' component={Subscribe}/>\n      </Router>\n    </>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}